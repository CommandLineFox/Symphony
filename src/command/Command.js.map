{"version":3,"file":"Command.js","sourceRoot":"","sources":["Command.ts"],"names":[],"mappings":";;AAcA,MAA8B,OAAO;IASjC,YAAuB,OAAuB;QAC1C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,IAAI,EAAE,CAAC;QACnD,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,IAAI,EAAE,CAAC;QACrD,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,IAAI,KAAK,CAAC;QACpE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,IAAI,KAAK,CAAC;IACxE,CAAC;IAED,OAAO,CAAC,KAAmB;QACvB,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;YACvD,KAAK,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YACnC,OAAO;SACV;QACD,IAAI,IAAI,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;YACtC,KAAK,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;YAC1D,OAAO;SACV;QAED,IAAI,KAAK,CAAC,WAAW,EAAE;YACnB,MAAM,oBAAoB,GAAG,KAAK,CAAC,WAAY,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAE,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAC7G,IAAI,CAAC,oBAAoB,EAAE;gBACvB,KAAK,CAAC,KAAK,CAAC,wCAAwC,CAAC,CAAC;gBACtD,OAAO;aACV;YACD,MAAM,qBAAqB,GAAG,KAAK,CAAC,WAAY,CAAC,cAAc,CAAC,KAAK,CAAC,MAAM,CAAE,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAC7G,IAAI,CAAC,qBAAqB,EAAE;gBACxB,KAAK,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC;gBACzD,OAAO;aACV;SACJ;QAED,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACpB,CAAC;CAGJ;AA9CD,0BA8CC","sourcesContent":["import { PermissionResolvable } from \"discord.js\";\r\nimport CommandEvent from \"./CommandEvent\";\r\nimport Group from \"./Group\";\r\n\r\ninterface CommandOptions {\r\n    readonly name: string;\r\n    readonly triggers: string[];\r\n    readonly botPermissions?: PermissionResolvable;\r\n    readonly userPermissions?: PermissionResolvable;\r\n    readonly group: Group;\r\n    readonly guildOnly?: boolean;\r\n    readonly ownerOnly?: boolean;\r\n}\r\n\r\nexport default abstract class Command implements CommandOptions {\r\n    readonly name: string;\r\n    readonly triggers: string[];\r\n    readonly botPermissions: PermissionResolvable;\r\n    readonly userPermissions: PermissionResolvable;\r\n    readonly group: Group;\r\n    readonly guildOnly?: boolean;\r\n    readonly ownerOnly?: boolean;\r\n\r\n    protected constructor (options: CommandOptions) {\r\n        this.name = options.name;\r\n        this.triggers = options.triggers;\r\n        this.botPermissions = options.botPermissions || [];\r\n        this.userPermissions = options.userPermissions || [];\r\n        this.group = options.group;\r\n        this.guildOnly = this.group.guildOnly || options.guildOnly || false;\r\n        this.ownerOnly = this.group.ownerOnly || options.ownerOnly || false;\r\n    }\r\n\r\n    execute(event: CommandEvent) : void {\r\n        if (this.ownerOnly && !event.client.isOwner(event.author)) {\r\n            event.reply(' you do not own me!');\r\n            return;\r\n        }\r\n        if (this.guildOnly && !event.isFromGuild) {\r\n            event.reply(' this command can only be used in servers.');\r\n            return;\r\n        }\r\n        \r\n        if (event.isFromGuild) {\r\n            const missingBotPermission = event.textChannel!.permissionsFor(event.guild.me)!.missing(this.botPermissions);\r\n            if (!missingBotPermission) {\r\n                event.reply(' I am not allowed to run this command.');\r\n                return;\r\n            }\r\n            const missingUserPermission = event.textChannel!.permissionsFor(event.member)!.missing(this.userPermissions);\r\n            if (!missingUserPermission) {\r\n                event.reply(' You are not allowed to run this command.');\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.run(event);\r\n    }\r\n\r\n    protected abstract run(event: CommandEvent) : void;\r\n}"]}