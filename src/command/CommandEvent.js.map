{"version":3,"file":"CommandEvent.js","sourceRoot":"","sources":["CommandEvent.ts"],"names":[],"mappings":";;AAAA,2CAAgK;AAGhK,MAAqB,YAAY;IAW7B,YAAa,OAAgB,EAAE,MAAmB,EAAE,QAAgB;QAChE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC;QAChD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,YAAY,wBAAW,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC;QAClF,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IACjC,CAAC;IAED,IAAI,CAAC,OAA0B,EAAE,OAAiD;QAC9E,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,OAA0B,EAAE,OAAwB;QACtD,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAChD,CAAC;CACJ;AA9BD,+BA8BC","sourcesContent":["import { Message, StringResolvable, MessageOptions, Attachment, RichEmbed, TextChannel, DMChannel, GroupDMChannel, User, Guild, GuildMember } from \"discord.js\";\r\nimport EeveeClient from \"../EeveeClient\";\r\n\r\nexport default class CommandEvent {\r\n    readonly message: Message;\r\n    readonly client: EeveeClient;\r\n    readonly author: User;\r\n    readonly argument: string;\r\n    readonly channel: TextChannel | DMChannel | GroupDMChannel;\r\n    readonly isFromGuild: boolean;\r\n    readonly textChannel: TextChannel | undefined;\r\n    readonly guild: Guild;\r\n    readonly member: GuildMember;\r\n\r\n    constructor (message: Message, client: EeveeClient, argument: string) {\r\n        this.message = message;\r\n        this.client = client;\r\n        this.author = message.author;\r\n        this.argument = argument;\r\n        this.channel = message.channel;\r\n        this.isFromGuild = this.channel.type === \"text\";\r\n        this.textChannel = this.channel instanceof TextChannel ? this.channel : undefined;\r\n        this.guild = message.guild;\r\n        this.member = message.member;\r\n    }\r\n\r\n    send(content?: StringResolvable, options?: MessageOptions | Attachment | RichEmbed): Promise <Message | Message[]> {\r\n        return this.channel.send(content, options);\r\n    }\r\n\r\n    reply(content?: StringResolvable, options?: MessageOptions) {\r\n        return this.message.reply(content, options);\r\n    }\r\n}"]}